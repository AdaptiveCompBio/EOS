// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// C_updatekeyWordTree
Rcpp::RawVector C_updatekeyWordTree(std::vector<std::string> clone_sequences, std::vector<int> ndn_start_vec, std::vector<int> ndn_end_vec, std::vector<int> clone_idx, std::vector<unsigned char> packed_tree);
RcppExport SEXP _EOS_C_updatekeyWordTree(SEXP clone_sequencesSEXP, SEXP ndn_start_vecSEXP, SEXP ndn_end_vecSEXP, SEXP clone_idxSEXP, SEXP packed_treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type clone_sequences(clone_sequencesSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type ndn_start_vec(ndn_start_vecSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type ndn_end_vec(ndn_end_vecSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type clone_idx(clone_idxSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned char> >::type packed_tree(packed_treeSEXP);
    rcpp_result_gen = Rcpp::wrap(C_updatekeyWordTree(clone_sequences, ndn_start_vec, ndn_end_vec, clone_idx, packed_tree));
    return rcpp_result_gen;
END_RCPP
}
// C_findMatchingIdx
Rcpp::List C_findMatchingIdx(std::vector<std::string> clone_sequences, std::vector<double> max_dist, double ndn_cost, std::vector<unsigned char> packed_tree);
RcppExport SEXP _EOS_C_findMatchingIdx(SEXP clone_sequencesSEXP, SEXP max_distSEXP, SEXP ndn_costSEXP, SEXP packed_treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type clone_sequences(clone_sequencesSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type max_dist(max_distSEXP);
    Rcpp::traits::input_parameter< double >::type ndn_cost(ndn_costSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned char> >::type packed_tree(packed_treeSEXP);
    rcpp_result_gen = Rcpp::wrap(C_findMatchingIdx(clone_sequences, max_dist, ndn_cost, packed_tree));
    return rcpp_result_gen;
END_RCPP
}
// C_getLocus
std::vector<std::string> C_getLocus(std::vector<std::string> cloneResolved, std::vector<std::string> vFamilyName, std::vector<std::string> vFamilyTies, std::vector<std::string> dFamilyName, std::vector<std::string> dFamilyTies, std::vector<std::string> jFamilyName, std::vector<std::string> jFamilyTies);
RcppExport SEXP _EOS_C_getLocus(SEXP cloneResolvedSEXP, SEXP vFamilyNameSEXP, SEXP vFamilyTiesSEXP, SEXP dFamilyNameSEXP, SEXP dFamilyTiesSEXP, SEXP jFamilyNameSEXP, SEXP jFamilyTiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type cloneResolved(cloneResolvedSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type vFamilyName(vFamilyNameSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type vFamilyTies(vFamilyTiesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dFamilyName(dFamilyNameSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type dFamilyTies(dFamilyTiesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type jFamilyName(jFamilyNameSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type jFamilyTies(jFamilyTiesSEXP);
    rcpp_result_gen = Rcpp::wrap(C_getLocus(cloneResolved, vFamilyName, vFamilyTies, dFamilyName, dFamilyTies, jFamilyName, jFamilyTies));
    return rcpp_result_gen;
END_RCPP
}
// C_determineCdr3Index
std::vector<int> C_determineCdr3Index(std::vector<int> cloneLength, std::vector<int> vIndex, std::vector<int> dIndex, std::vector<int> cdr3Length);
RcppExport SEXP _EOS_C_determineCdr3Index(SEXP cloneLengthSEXP, SEXP vIndexSEXP, SEXP dIndexSEXP, SEXP cdr3LengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type cloneLength(cloneLengthSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type vIndex(vIndexSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type dIndex(dIndexSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type cdr3Length(cdr3LengthSEXP);
    rcpp_result_gen = Rcpp::wrap(C_determineCdr3Index(cloneLength, vIndex, dIndex, cdr3Length));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_EOS_C_updatekeyWordTree", (DL_FUNC) &_EOS_C_updatekeyWordTree, 5},
    {"_EOS_C_findMatchingIdx", (DL_FUNC) &_EOS_C_findMatchingIdx, 4},
    {"_EOS_C_getLocus", (DL_FUNC) &_EOS_C_getLocus, 7},
    {"_EOS_C_determineCdr3Index", (DL_FUNC) &_EOS_C_determineCdr3Index, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_EOS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
